# SPDX-FileCopyrightText: 2024 pydot contributors
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/README.md"
      - "LICENSE"
      - "ChangeLog"
  pull_request:
    branches: ["*"]
    paths-ignore:
      - "**/README.md"
      - "LICENSE"
      - "ChangeLog"
  workflow_dispatch:

concurrency:
  group: CI-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  tests:
    name: "${{ matrix.system.os }}, Py${{ matrix.python-version }}"
    runs-on: "${{ matrix.system.os }}-latest"
    continue-on-error: ${{ matrix.system.can-fail }}

    strategy:
      matrix:
        system:
          - {os: ubuntu, can-fail: false}
          - {os: windows, can-fail: true}
          - {os: macos, can-fail: true}
        python-version:
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip"
      - name: "Set up environment"
        shell: bash
        run: |
          mkdir test_errors
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo "TEST_ERROR_DIR=$(cygpath -w $(realpath ./test_errors))" >> "$GITHUB_ENV"
          else
            echo "TEST_ERROR_DIR=$(pwd -P)/test_errors" >> "$GITHUB_ENV"
          fi
          echo "COVERAGE_FILE=.coverage.${{ runner.os }}.${{ matrix.python-version }}" >> "$GITHUB_ENV"
      - name: "Install graphviz (Linux)"
        if: runner.os == 'linux'
        run: sudo apt install graphviz
      - name: "Install graphviz (Windows)"
        if: runner.os == 'windows'
        run: choco install graphviz --ignore-http-cache
      - name: "Install graphviz (macOS)"
        if: runner.os == 'macos'
        run: brew install graphviz
      - name: "Install Python dependencies"
        run: python -m pip install pip==24.0.0 setuptools==68.0.0 wheel==0.42.0 tox==4.8.0 tox-gh==1.3.1
      - name: "Setup tests"
        run: tox -vv --notest
      - name: "Run tests"
        run: tox --skip-pkg-install
      - name: "Prepare error artifacts"
        if: ${{ failure() }}
        run: cp test/compare_images.sh "${{ env.TEST_ERROR_DIR }}"
      - name: "Publish error artifacts"
        if: ${{ failure() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: test-errors-${{ runner.os }}-${{ matrix.python-version }}
          path: ${{ env.TEST_ERROR_DIR }}
          if-no-files-found: ignore
      - name: "Publish coverage-data artifact"
        if: ${{ always() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: coverage-data-${{ runner.os }}-${{ matrix.python-version }}
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      # NOTE: These permissions will only really be relevant for
      # internal PRs (those based on a branch in the repo). When
      # running in a PR branch from a fork, GitHub's standard
      # permissions won't allow writing to the repo, which is why
      # coverage data is published as a build artifact and passed
      # to the secure workflow in coverage.yml for processing.
      # See: py-cov-action/python-coverage-comment-action#461
      #
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    steps:
      - name: "Check out source"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: "Install coverage.py"
        run: python -m pip install coverage
      - name: "Download coverage-data artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
      # - name: "Combine coverage data"
      #   run: coverage combine
      # - name: "Report aggregate coverage"
      #   run: coverage report
      - name: "Coverage comment"
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MERGE_COVERAGE_FILES: true
          ANNOTATE_MISSING_LINES: true
      - name: "Store PR comment for secure workflow"
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
